#!/usr/bin/env python
# -*- Mode: python; tab-width: 4; indent-tabs-mode: nil; indent-offset: 4 -*-

import roslib;
roslib.load_manifest('camera_trigger')
roslib.load_manifest('std_srvs')
import rospy

import threading

import camera_trigger.srv
import std_srvs.srv

try:
    from triggerlib import ttrigger
    ttriggerlib = "ros"
except ImportError:
    from motmot.fview_ext_trig import ttrigger
    ttriggerlib = "motmot"

class ROSCamTrigger:
    def __init__(self, debug, framerate):
        self.dev = ttrigger.DeviceModel()
        self.lock = threading.Lock()

        rospy.loginfo("started camera trigger (using ttrigger.py from %s)" % ttriggerlib)

        s = rospy.Service('~set_framerate', camera_trigger.srv.SetFramerate, self.handle_set_framerate)
        s = rospy.Service('~trigger_once', std_srvs.srv.Empty, self.handle_trigger_once)

        if framerate >= 0.0:
            self._set_framerate(framerate)

    def _set_framerate(self, fps):
        rospy.loginfo("setting framerate to %ffps" % fps)
        with self.lock:
            self.dev.set_frames_per_second_approximate(0.0)
            self.dev.reset_framecount_A = True
            self.dev.set_frames_per_second_approximate(fps)

    def handle_set_framerate(self, req):
        self._set_framerate(req.fps)
        return camera_trigger.srv.SetFramerateResponse()

    def handle_trigger_once(self, req):
        with self.lock:
            self.dev.trigger_single_frame()
        return std_srvs.srv.EmptyResponse()

    def spin(self):
        rospy.spin()    

if __name__ == "__main__":
    rospy.init_node('camera_trigger')
    r = ROSCamTrigger(
            rospy.get_param('~debug', False),
            rospy.get_param('~framerate', -1.0))
    r.spin()

