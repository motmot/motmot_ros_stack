#!/usr/bin/env python
import argparse
import sys

import motmot.cam_iface.cam_iface_ctypes as cam_iface
import numpy as np

# ROS imports
import roslib; roslib.load_manifest('camiface_ros')
import rospy
from sensor_msgs.msg import Image

def acquire(args):
    num_devices = cam_iface.get_num_cameras()
    if args.device_number is None:
        args.device_number = num_devices - 1

    num_modes = cam_iface.get_num_modes(args.device_number)

    for this_mode_num in range(num_modes):
        mode_str = cam_iface.get_mode_string(args.device_number,this_mode_num)
        if args.mode_number is None:
            if 'DC1394_VIDEO_MODE_FORMAT7_0' in mode_str and 'MONO8' in mode_str:
                args.mode_number=this_mode_num
    if args.mode_number is None:
        args.mode_number=0

    if args.debug:
        mode_string = cam_iface.get_mode_string(args.device_number,args.mode_number)
        sys.stdout.write('opening device %d with %d buffers in mode %d ("%s")\n'%(
            args.device_number,
            args.num_buffers,
            args.mode_number,
            mode_string))

    cam = cam_iface.Camera(args.device_number,
                           args.num_buffers,
                           args.mode_number)

    if args.trigger_mode is not None:
        cam.set_trigger_mode_number( args.trigger_mode )

    pixel_format = cam.get_pixel_coding()
    if pixel_format == 'MONO8':
        encoding = 'mono8'
    elif pixel_format in ('RAW8:RGGB','MONO8:RGGB'):
        encoding = 'bayer_rggb8'
    elif pixel_format in ('RAW8:BGGR','MONO8:BGGR'):
        encoding = 'bayer_bggr8'
    elif pixel_format in ('RAW8:GBRG','MONO8:GBRG'):
        encoding = 'bayer_gbrg8'
    elif pixel_format in ('RAW8:GRBG','MONO8:GRBG'):
        encoding = 'bayer_grbg8'
    else:
        raise ValueError('unknown pixel format "%s"'%pixel_format)


    rospy.init_node('camnode',
                    anonymous=True, # allow multiple instances to run
                    disable_signals=True,
                    )
    publisher = rospy.Publisher('image_raw',
                                Image,
                                tcp_nodelay=True,
                                )

    cam.start_camera()
    while 1:
        try:
            buf = cam.grab_next_frame_blocking()
        except cam_iface.FrameDataMissing:
            if args.debug:
                sys.stdout.write('M'); sys.stdout.flush()
            continue
        except cam_iface.FrameSystemCallInterruption:
            if args.debug:
                sys.stdout.write('I'); sys.stdout.flush()
            continue
        except cam_iface.FrameDataCorrupt:
            if args.debug:
                sys.stdout.write('C'); sys.stdout.flush()
            continue

        timestamp = cam.get_last_timestamp()
        framenumber = cam.get_last_framenumber()

        if 1:
            msg = Image()
            msg.header.seq=framenumber
            if timestamp is not None:
                msg.header.stamp=rospy.Time.from_sec(timestamp)
            else:
                msg.header.stamp=rospy.Time.from_sec(0.0)
            msg.header.frame_id = "0"

            npbuf = np.array(buf)
            (height,width) = npbuf.shape

            msg.height = height
            msg.width = width
            msg.encoding = encoding
            msg.step = width
            msg.data = npbuf.tostring() # let numpy convert to string

            publisher.publish(msg)

        if args.debug:
            sys.stdout.write('.'); sys.stdout.flush()

def query(args):
    num_devices = cam_iface.get_num_cameras()
    for device_num in range(num_devices):
        num_modes = cam_iface.get_num_modes(device_num)
        sys.stdout.write('camera %d:'%(device_num,)+'\n')

        sys.stdout.write('  Modes:'+'\n')
        for this_mode_num in range(num_modes):
            mode_str = cam_iface.get_mode_string(device_num,this_mode_num)
            sys.stdout.write('    %d: %s'%(this_mode_num,mode_str)+'\n')

        this_mode_num=0
        cam = cam_iface.Camera(device_num,
                               1,
                               this_mode_num)

        n_trigger_modes = cam.get_num_trigger_modes()
        sys.stdout.write('  Trigger modes:'+'\n')
        for i in range(n_trigger_modes):
            sys.stdout.write('    %d: %s'%(i,cam.get_trigger_mode_string(i))+'\n')
        sys.stdout.write('\n')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    subparsers = parser.add_subparsers()
    parser_acquire = subparsers.add_parser('acquire')
    parser_acquire.set_defaults(func=acquire)

    parser_acquire.add_argument(
        '--device_number', type=int, help='the number of the camera')
    parser_acquire.add_argument(
        '--mode_number', type=int, help='the mode number')
    parser_acquire.add_argument(
        '--num_buffers', type=int, help='number of image buffers', default=30)
    parser_acquire.add_argument(
        '--trigger_mode', type=int, help='trigger mode')
    parser_acquire.add_argument(
        '--debug', action='store_true')

    parser_query = subparsers.add_parser('query')
    parser_query.set_defaults(func=query)

    # use argparse, but only after ROS did its thing
    argv = rospy.myargv()
    args = parser.parse_args(argv[1:])
    args.func(args)

